name: Dogfooding Clients

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-android:
    runs-on: ubuntu-18.04
    steps:
      - name: üëÄ Checkout
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: ‚ôªÔ∏è Restore workspace node modules
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: |
            # See "workspaces" ‚Üí "packages" in the root package.json for the source of truth of
            # which node_modules are affected by the root yarn.lock
            node_modules
            apps/*/node_modules
            home/node_modules
            packages/*/node_modules
            packages/@unimodules/*/node_modules
            react-native-lab/react-native/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: ‚ôªÔ∏è Restore node modules in tools
        uses: actions/cache@v2
        with:
          path: tools/node_modules
          key: ${{ runner.os }}-tools-modules-${{ hashFiles('tools/yarn.lock') }}
      - name: üß∂ Yarn install
        run: yarn install --frozen-lockfile
      - name: üíé Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: üêô Install git-crypt
        run: sudo apt-get install git-crypt
      - name: üîì Decrypt secrets if possible
        env:
          GIT_CRYPT_KEY_BASE64: ${{ secrets.GIT_CRYPT_KEY_BASE64 }}
        run: |
          if [ -z "${GIT_CRYPT_KEY_BASE64}" ]; then
            echo 'git-crypt key not present in environment'
          else
            git crypt unlock <(echo $GIT_CRYPT_KEY_BASE64 | base64 --decode)
          fi
      - name: ‚ôªÔ∏è Restore Gradle caches
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('android/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: ‚ôªÔ∏è Restore Android NDK from cache
        uses: actions/cache@v2
        id: cache-android-ndk
        with:
          path: /usr/local/lib/android/sdk/ndk/19.2.5345600/
          key: ${{ runner.os }}-ndk-19.2.5345600
          restore-keys: |
            ${{ runner.os }}-ndk-
      - name: üõ† Install NDK
        if: steps.cache-android-ndk.outputs.cache-hit != 'true'
        run: |
          sudo $ANDROID_SDK_ROOT/tools/bin/sdkmanager --install "ndk;19.2.5345600"
      - name: üè≠ Build APK
        env:
          ANDROID_KEYSTORE_B64: ${{ secrets.ANDROID_KEYSTORE_B64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ExponentKey
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_NDK_HOME: /usr/local/lib/android/sdk/ndk/19.2.5345600/
          USE_DOGFOODING_PUBLISHED_KERNEL_MANIFEST: true
        run: |
          BUILD_TYPE="Release"
          FLAVOR="Versioned"
          echo "Building with $FLAVOR flavor"
          if [ -z "$ANDROID_KEYSTORE_B64" ]; then
            echo "External build detected, only signed dogfooding builds are supported"
            exit 1;
          else
            echo "Internal build detected, APK will be signed"
            echo $ANDROID_KEYSTORE_B64 | base64 -d > android/app/release-key.jks
            bin/fastlane android build build_type:$BUILD_TYPE flavor:$FLAVOR
          fi
      - name: üíæ Upload APK artifact
        uses: actions/upload-artifact@v2
        with:
          name: android-apk
          path: android/app/build/outputs/apk
      - name: üíæ Store daemon logs for debugging crashes
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: gradle-daemon-logs
          path: ~/.gradle/daemon
      - name: üîî Notify on Slack
        uses: 8398a7/action-slack@v3
        if: failure() && (github.event.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/heads/sdk-'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_android }}
        with:
          channel: '#platform-android'
          status: ${{ job.status }}
          fields: job,message,ref,eventName,author,took
          author_name: Expo Go Dogfooding (Android)
  build-ios:
    runs-on: macos-11
    steps:
      - name: üëÄ Checkout a ref for the event
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: üî® Switch to Xcode 12.5.1
        run: sudo xcode-select --switch /Applications/Xcode_12.5.1.app
      - name: üç∫ Setup Homebrew
        run: brew install git-crypt
      - name: üîì decrypt secrets if possible
        env:
          GIT_CRYPT_KEY_BASE64: ${{ secrets.GIT_CRYPT_KEY_BASE64 }}
        run: |
          if [[ ${GIT_CRYPT_KEY_BASE64:-unset} = unset ]]; then
            echo 'git-crypt key not present in environment'
          else
            git crypt unlock <(echo $GIT_CRYPT_KEY_BASE64 | base64 --decode)
          fi
      - run: echo "$(pwd)/bin" >> $GITHUB_PATH
      - name: ‚ôªÔ∏è Restore workspace node modules
        uses: actions/cache@v2
        id: node-modules-cache
        with:
          path: |
            # See "workspaces" ‚Üí "packages" in the root package.json for the source of truth of
            # which node_modules are affected by the root yarn.lock
            node_modules
            apps/*/node_modules
            home/node_modules
            packages/*/node_modules
            packages/@unimodules/*/node_modules
            react-native-lab/react-native/node_modules
          key: ${{ runner.os }}-modules-${{ hashFiles('yarn.lock') }}
      - name: üß∂ Yarn install
        run: yarn install --frozen-lockfile
      - name: ‚ôªÔ∏è Restore node modules in tools
        uses: actions/cache@v2
        with:
          path: tools/node_modules
          key: ${{ runner.os }}-tools-modules-${{ hashFiles('tools/yarn.lock') }}
      - name: üè≠ Generating dynamic macros
        run: expotools ios-generate-dynamic-macros
      - name: üíé Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: ‚ôªÔ∏è Restore ios/Pods from cache
        uses: actions/cache@v2
        with:
          path: 'ios/Pods'
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: ü•• Install CocoaPods in `ios`
        run: pod install
        working-directory: ios
      - name: üèó Build Expo Go for simulator
        run: |
          FLAVOR="versioned"
          expotools client-build --platform ios --flavor $FLAVOR
        timeout-minutes: 120
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          USE_DOGFOODING_PUBLISHED_KERNEL_MANIFEST: true
      - name: üíæ Save test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: fastlane-logs
          path: ~/Library/Logs/fastlane
      - name: üîî Notify on Slack
        uses: 8398a7/action-slack@v3
        if: failure() && (github.event.ref == 'refs/heads/master' || startsWith(github.event.ref, 'refs/heads/sdk-'))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.slack_webhook_ios }}
        with:
          channel: '#platform-ios'
          status: ${{ job.status }}
          fields: job,message,ref,eventName,author,took
          author_name: Expo Go Dogfooding (iOS)
